function new_states = forward_dynamics(...
  old_states,...
  ext_forces_body,...
  ext_torques_body,...
  m,...
  J_inert,...
  dt...
)
  
  g = 9.81;
  k_vel_drag = 0.5;
  
  xg = transpose(old_states(1:3));
  vg = transpose(old_states(4:6));
  qb2g = transpose(old_states(7:10));
  wb = transpose(old_states(11:13));
  
  ext_f = quat_mult(...
    qb2g,...
    quat_mult(...
      vec2quat(ext_forces_body),...
      quat_inv(qb2g)...
    )...
  )(2:4);
  f = ext_f - m*g*[0; 0; 1] - k_vel_drag*norm(vg)*vg;
  xg += vg*dt + 0.5*f*dt*dt/m;
  % Normally there would be another call to the force calculator, and the
  % updated forces would be averaged with the previous forces to update
  % velocity. In our environment we assume that position does not affect force.
  vg += f*dt/m;
  
  tau = ext_torques_body - 0.1*wb;

  wb += (J_inert^-1)*(tau - cross(wb, J_inert*wb))*dt;
  qb2g += 0.5*quat_mult(qb2g, vec2quat(wb))*dt;
  
  if norm(qb2g) < 0.999
    qb2g += 0.1*(1 - norm(qb2g)^2)*qb2g;
  end  

  new_states = [transpose(xg), transpose(vg), transpose(qb2g), transpose(wb)];
end  